% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_partition.R
\name{getTrainTestPartition}
\alias{getTrainTestPartition}
\title{Partition patients into testing and training datasets based on mean survival and gender.}
\usage{
getTrainTestPartition(data, database = NULL, personTable = NULL,
  verbose = TRUE, seed, survData = NULL)
}
\arguments{
\item{data}{a dataframe holding the event data ready for logit modeling, where each row is an event/clinical visit and the columns
contain features of the event and the labels. It must at least contain a sample \code{id} column in the form "patientID.eventID".}

\item{database}{a MySQL database, see \code{\link{getData}}}

\item{personTable}{a patient-based table in \code{database}, see \code{\link{getData}}}

\item{verbose}{boolean, True for print, False for silence}

\item{seed}{int, seed for split}

\item{survData}{if not calling database, provide the survival data, see \code{\link{getSurvData}}}
}
\value{
The eventIDs of the samples to put in training partition.
}
\description{
Partition patients into testing and training datasets based on mean survival and gender.
}
\details{
Patients are separated in two groups, patients with lower than mean overall survival
and patients with higher or equal to mean overall survival. Each group is
partitioned into 75\% training and 25\% testing using gender stratification. The training
and testing partitions have similar gender distributions within the two groups.

The training partitions from the low survival group is combined with the high survival group.
The testing partitions are also combined in this way.
Patients in training are not in testing.

Note: this function calls \code{\link{getSurvData}} to obtain overall survival days since the parameter \code{data}
only contains labels and features for classification.

Ratios between folds work better when number of folds are higher (e.g., 10 versus 2).
}
\examples{
data("fake_data")
seed <- 1
fake_demo <- fake_data$demo
survData <- fake_data$person
fake_data$events <- cleanData(fake_data$events, tType = 'c') # pool of visits considered

fake_data <- merge(fake_data$events, fake_data$person, by='iois', all.x=T)
fake_data <- prepDemographics(fake_data, fake_demo) # need gender info
fake_data <- prepSurvivalLabels(fake_data) # get survival labels, these also change
fake_data$id <- paste0(fake_data$iois,'.',fake_data$eventID) # clinical ids

train.ids <- getTrainTestPartition(data=fake_data,
                                   database=NULL, 
                                   personTable=NULL,
                                   survData=survData,
                                   seed=seed,
                                   verbose=T)
                                   
}
